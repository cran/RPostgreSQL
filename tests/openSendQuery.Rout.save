
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ## dbWriteTable test
> ##
> ## Assumes that
> ##  a) PostgreSQL is running, and
> ##  b) the current user can connect
> ## both of which are not viable for release but suitable while we test
> ##
> ## Dirk Eddelbuettel, 10 Sep 2009
> 
> ## only run this if this env.var is set correctly
> if (Sys.getenv("POSTGRES_USER") != "" & Sys.getenv("POSTGRES_HOST") != "" & Sys.getenv("POSTGRES_DATABASE") != "") {
+ 
+     ## try to load our module and abort if this fails
+     stopifnot(require(RPostgreSQL))
+     stopifnot(require(datasets))
+ 
+     ## load the PostgresSQL driver
+     drv <- dbDriver("PostgreSQL")
+ 
+     ## create two independent connections
+     con <- dbConnect(drv,
+                      user=Sys.getenv("POSTGRES_USER"),
+                      password=Sys.getenv("POSTGRES_PASSWD"),
+                      host=Sys.getenv("POSTGRES_HOST"),
+                      dbname=Sys.getenv("POSTGRES_DATABASE"),
+                      port=ifelse((p<-Sys.getenv("POSTGRES_PORT"))!="", p, 5432))
+ 
+     if (dbExistsTable(con, "tmptest")) {
+         cat("Removing tmptest\n")
+         dbRemoveTable(con, "tmptest")
+     }
+ # create temporary table (as a copy of any existing one)
+ #    dbGetQuery(con, "BEGIN TRANSACTION")
+     cat("create temp table tmptest with dbGetQuery\n")
+     dbGetQuery(con, "CREATE TEMP TABLE tmptest (f1 int)")
+ 
+ # query temp table
+     rs<-dbGetQuery(con, "SELECT * from tmptest")
+     print(rs)
+     
+     cat("create temp table tmptest with dbSendQuery\n")
+     dbSendQuery(con, "CREATE TEMP TABLE tmptest2(f2 int)")
+ 
+ # query temp table
+     rs2<-dbGetQuery(con, "SELECT * from tmptest2")
+     print(rs2)
+     ## and disconnect
+     dbDisconnect(con)
+ 
+     con <- dbConnect(drv,
+                      user=Sys.getenv("POSTGRES_USER"),
+                      password=Sys.getenv("POSTGRES_PASSWD"),
+                      host=Sys.getenv("POSTGRES_HOST"),
+                      dbname=Sys.getenv("POSTGRES_DATABASE"),
+                      port=ifelse((p<-Sys.getenv("POSTGRES_PORT"))!="", p, 5432))
+ 
+     if (dbExistsTable(con, "tmptest")) {
+         cat("FAIL tmptest persisted after disconnection\n")
+         cat("Removing tmptest\n")
+         dbRemoveTable(con, "tmptest")
+     }else{
+         cat("PASS tmptest disappeared after disconnection\n")
+     }
+     dbDisconnect(con)
+ }
Loading required package: RPostgreSQL
Loading required package: DBI
create temp table tmptest with dbGetQuery
[1] f1
<0 rows> (or 0-length row.names)
create temp table tmptest with dbSendQuery
[1] f2
<0 rows> (or 0-length row.names)
PASS tmptest disappeared after disconnection
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  0.454   0.031   0.497 
